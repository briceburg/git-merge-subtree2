#!/bin/bash
source "$( dirname $( readlink -e $0 ) )/lib/lib.sh"

# Similiar to the built-in recursive merge strategy's subtree option, but has
# support for merging only a specific (sub-)folder of the source branch. The
# recursive algorithm isn't used by subtree2, however. Instead the more simple
# resolve algorithm is used. There's no difference between both if there's only
# one common ancestor.

# Arguments:
# [--their-prefix=<prefix>] [--my-prefix=<prefix>] [--base-prefix=<prefix>] [--base=<common-ancestor>] [<common-ancestor>] -- <my-commit> <their-commit>
#    my-prefix: Merges into a specific folder of the target branch (behaves the
#               mostly the same as the built-in recursive strategy's 
#               "-Xsubtree=<prefix>" option)
# their-prefix: Limits subtree merging to a specific folder of the source branch
#  base-prefix: The prefix applicable to <common-ancestor>. Usefull if the
#               prefix has changed from <common-ancestor> to <their-commit> 
#         base: The common base (<common-ancestor>) of <my-commit> and
#               <their-commit>.


#
# Read arguments
BASE=""
MINE=""
THEIRS=""
MY_PREFIX=""
THEIR_PREFIX=""
BASE_PREFIX=""
MERGE_FILE_CONFLICT_STYLE=""
MERGE_FILE_MODE=""

function read-arguments() {
    while [[ $# -gt 0 ]]
    do
        local VAL="${1##*=}"

        case "$1" in
            --their-prefix=*)
                THEIR_PREFIX="$VAL"
                normalize-prefix "THEIR_PREFIX"
                ;;
            --my-prefix=*)
                MY_PREFIX="$VAL"
                normalize-prefix "MY_PREFIX"
                ;;
            --base-prefix=*)
                BASE_PREFIX="$VAL"
                normalize-prefix "BASE_PREFIX"
                ;;
            --base=*)
                BASE="$VAL"
                ;;
            --diff3)
                MERGE_FILE_CONFLICT_STYLE="--diff3"
                ;;
            --no-diff3)
                MERGE_FILE_CONFLICT_STYLE=""
                ;;
            --ours)
                MERGE_FILE_MODE="--ours"
                ;;
            --theirs)
                MERGE_FILE_MODE="--theirs"
                ;;
            --union)
                MERGE_FILE_MODE="--union"
                ;;                
            --)
                if [[ $# -ne 3 ]]; then
                    >&2 echo "Exactly to remotes needed, but got $#."
                    exit 2
                fi
                
                MINE="$2"
                THEIRS="$3"
                shift 2
                ;;
                *)
                if [[ -n "$BASE" ]]; then
                    >&2 echo "A custom base has already been specified. Ignoring base provided by `git merge`."
                else
                    BASE="$1"
                fi
                ;;
        esac
        shift # past argument or value
    done

    if [[ -z $BASE_PREFIX ]]; then
        BASE_PREFIX=$THEIR_PREFIX
    fi
}
read-arguments "$@"

#
# Prepare trees for merging

# Check whether "$BASE" is within the list of "first parents" of THEIRS
# Important: THEIRS needs to be a commit reference and not a shifted TREEISH
# => `is-base-theirs` can't be used after `shift-tree "THEIRS"`
function is-base-theirs() {   
    BASE_DATE=$(git show -s $BASE --format=%ci)
    git rev-list --since "$BASE_DATE" --first-parent "$THEIRS" | grep -q "$BASE"
    return $?
}


if [[ -z $BASE ]]; then
    # 2-way merge: Use mine as base
    BASE="$MINE"
elif is-base-theirs; then
    # base tree needs to be shifted, because BASE is within the list of 
    # "first parents" of THEIRS and hence paths have not already been adjusted 
    prepare-remote-tree "BASE" "$BASE_PREFIX" "$MINE" "$MY_PREFIX" 
fi

prepare-remote-tree "THEIRS" "$THEIR_PREFIX" "$MINE" "$MY_PREFIX"


#
# Merge

merge-resolve "$BASE" "$MINE" "$THEIRS" || exit $?
